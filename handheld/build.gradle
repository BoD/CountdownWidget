apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId 'org.jraf.android.countdownwidget3'
        minSdkVersion 9
        targetSdkVersion versions.targetSdk
        versionCode buildNumber
        versionName buildProperties.versionName

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        buildConfigField 'String', 'GIT_SHA1', "\"${gitSha1}\""
        buildConfigField 'String', 'BUILD_DATE', "\"${buildDate}\""
        // For now we enable strict mode for all the configs
        buildConfigField 'boolean', 'STRICT_MODE', 'true'

        resConfigs 'en', 'fr'

        // Useful for api keys in the manifest (Maps, Crashlytics, ...)
        manifestPlaceholders = buildProperties

        // Setting this to false enables the png generation at buildtime
        // (see http://android-developers.blogspot.fr/2016/02/android-support-library-232.html)
        vectorDrawables.useSupportLibrary = false
    }

    flavorDimensions 'blur', 'movie'

    productFlavors {
        episode7 {
            dimension 'movie'

            buildConfigField 'org.jraf.android.countdownwidget.handheld.util.Movie', 'MOVIE', 'org.jraf.android.countdownwidget.handheld.util.Movie.EPISODE_VII'
        }

        rogueone {
            dimension 'movie'

            buildConfigField 'org.jraf.android.countdownwidget.handheld.util.Movie', 'MOVIE', 'org.jraf.android.countdownwidget.handheld.util.Movie.ROGUE_ONE'
        }

        episode8 {
            dimension 'movie'

            buildConfigField 'org.jraf.android.countdownwidget.handheld.util.Movie', 'MOVIE', 'org.jraf.android.countdownwidget.handheld.util.Movie.EPISODE_VIII'
        }


        blurred {
            dimension 'blur'
        }

        clear {
            dimension 'blur'
        }
    }
    signingConfigs {
        release {
            storeFile file(buildProperties.signingStoreFile)
            storePassword buildProperties.signingStorePassword
            keyAlias buildProperties.signingKeyAlias
            keyPassword buildProperties.signingKeyPassword
        }
    }

    buildTypes {
        debug {
            buildConfigField 'boolean', 'CRASH_REPORT', 'false'
        }

        release {
            buildConfigField 'boolean', 'CRASH_REPORT', 'true'

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }

    dataBinding {
        enabled = true
    }
}

android.applicationVariants.all { variant ->
    // Define application id based on flavors
    switch (variant.flavorName) {
        // Episode VII
        case "blurredEpisode7":
            variant.mergedFlavor.setApplicationId('org.jraf.android.countdownwidget3')
            break

        case "clearEpisode7":
            variant.mergedFlavor.setApplicationId('org.jraf.android.countdownwidget3.unlicensed')
            break

        // Rogue One
        case "blurredRogueone":
            variant.mergedFlavor.setApplicationId('org.jraf.android.countdownwidget3.ro.blurred')
            break

        case "clearRogueone":
            variant.mergedFlavor.setApplicationId('org.jraf.android.countdownwidget3.ro.clear')
            break

        // Episode VII
        case "blurredEpisode8":
            variant.mergedFlavor.setApplicationId('org.jraf.android.countdownwidget3.e8.blurred')
            break

        case "clearEpisode8":
            variant.mergedFlavor.setApplicationId('org.jraf.android.countdownwidget3.e8.clear')
            break
    }

    // Create new copy tasks, for release builds
    if (variant.buildType.name == 'release') {
        variant.outputs.each { output ->
            def apkName = "${globalProjectName}-${project.name}-${android.defaultConfig.versionCode}-${variant.flavorName}-signed.apk"

            // Copy the apk to the 'etc' folder
            def copyApkToEtc = tasks.create("copy${variant.name.capitalize()}ApkToEtc", Copy)
            copyApkToEtc.from(output.outputFile)
            copyApkToEtc.into('../etc/apk')
            copyApkToEtc.rename output.outputFile.name, apkName

            // Copy the apk to the deploy folder
            def copyApkToDeploy = tasks.create("copy${variant.name.capitalize()}ApkToDeploy", Copy)
            copyApkToDeploy.from(output.outputFile)
            copyApkToDeploy.into(buildProperties.deployFolder)
            copyApkToDeploy.rename output.outputFile.name, apkName

            // Make the copy tasks run after the assemble tasks of the variant
            variant.assemble.finalizedBy(copyApkToEtc, copyApkToDeploy)
        }
    }
}

configurations {
    blurredEpisode7Compile
    clearEpisode7Compile
    blurredRogueoneCompile
    clearRogueoneCompile
    blurredEpisode8Compile
    clearEpisode8Compile

    blurredEpisode7WearApp
    clearEpisode7WearApp
    blurredRogueoneWearApp
    clearRogueoneWearApp
    blurredEpisode8WearApp
    clearEpisode8WearApp
}

dependencies {
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    blurredEpisode7Compile project(path: ':common', configuration: 'blurredEpisode7Release')
    blurredRogueoneCompile project(path: ':common', configuration: 'blurredRogueoneRelease')
    blurredEpisode8Compile project(path: ':common', configuration: 'blurredEpisode8Release')

    clearEpisode7Compile project(path: ':common', configuration: 'clearEpisode7Release')
    clearRogueoneCompile project(path: ':common', configuration: 'clearRogueoneRelease')
    clearEpisode8Compile project(path: ':common', configuration: 'clearEpisode8Release')

    compile "com.android.support:appcompat-v7:$versions.supportLibrary"
    compile "com.android.support:preference-v7:$versions.supportLibrary"
    compile "com.android.support:preference-v14:$versions.supportLibrary"
//    compile "com.google.android.gms:play-services-gcm:$versions.playServices"
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') { transitive = true; }
    compile 'com.github.BoD:jraf-android-util:-SNAPSHOT'

    // Package the wear apk inside this one
    blurredEpisode7WearApp project(path: ':wearable', configuration: 'blurredEpisode7Release')
    blurredRogueoneWearApp project(path: ':wearable', configuration: 'blurredRogueoneRelease')
    blurredEpisode8WearApp project(path: ':wearable', configuration: 'blurredEpisode8Release')
    clearEpisode7WearApp project(path: ':wearable', configuration: 'clearEpisode7Release')
    clearRogueoneWearApp project(path: ':wearable', configuration: 'clearRogueoneRelease')
    clearEpisode8WearApp project(path: ':wearable', configuration: 'clearEpisode8Release')
}
