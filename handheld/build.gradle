apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId 'org.jraf.android.countdownwidget3'
        minSdkVersion 9
        targetSdkVersion 23
        versionCode buildNumber
        versionName buildProperties['versionName']

        buildConfigField 'String', 'GIT_SHA1', '"' + gitSha1() + '"'
        buildConfigField 'String', 'BUILD_DATE', '"' + buildDate() + '"'
        // For now we enable strict mode for all the configs
        buildConfigField 'boolean', 'STRICT_MODE', 'true'

        resConfigs 'en', 'fr'
    }

    flavorDimensions 'blur', 'movie'

    productFlavors {
        episode7 {
            dimension 'movie'

            buildConfigField 'org.jraf.android.countdownwidget.handheld.util.Movie', 'MOVIE', 'org.jraf.android.countdownwidget.handheld.util.Movie.EPISODE_VII'
        }

        rogueone {
            dimension 'movie'

            buildConfigField 'org.jraf.android.countdownwidget.handheld.util.Movie', 'MOVIE', 'org.jraf.android.countdownwidget.handheld.util.Movie.ROGUE_ONE'
        }

        episode8 {
            dimension 'movie'

            buildConfigField 'org.jraf.android.countdownwidget.handheld.util.Movie', 'MOVIE', 'org.jraf.android.countdownwidget.handheld.util.Movie.EPISODE_VIII'
        }


        blurred {
            dimension 'blur'
        }

        clear {
            dimension 'blur'
        }
    }

    signingConfigs {
        release {
            storeFile file(buildProperties['key-store'])
            storePassword buildProperties['key-store-password']
            keyAlias buildProperties['key-alias']
            keyPassword buildProperties['key-alias-password']
        }
    }

    buildTypes {
        debug {
            buildConfigField 'boolean', 'CRASH_REPORT', 'false'
        }

        release {
            buildConfigField 'boolean', 'CRASH_REPORT', 'true'

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }
}

def releaseTask = tasks.create('release')
releaseTask << {
    // Increment build number
    buildNumberProperties['build.number'] = (buildNumber + 1).toString()
    buildNumberProperties.store(buildNumberFile.newWriter(), null)
}

android.applicationVariants.all { variant ->
    // Define application id based on flavors
    switch (variant.flavorName) {
        // Episode VII
        case "blurredEpisode7":
            variant.mergedFlavor.setApplicationId('org.jraf.android.countdownwidget3')
            break

        case "clearEpisode7":
            variant.mergedFlavor.setApplicationId('org.jraf.android.countdownwidget3.unlicensed')
            break

        // Rogue One
        case "blurredRogueone":
            variant.mergedFlavor.setApplicationId('org.jraf.android.countdownwidget3.ro.blurred')
            break

        case "clearRogueone":
            variant.mergedFlavor.setApplicationId('org.jraf.android.countdownwidget3.ro.clear')
            break

        // Episode VII
        case "blurredEpisode8":
            variant.mergedFlavor.setApplicationId('org.jraf.android.countdownwidget3.e8.blurred')
            break

        case "clearEpisode8":
            variant.mergedFlavor.setApplicationId('org.jraf.android.countdownwidget3.e8.clear')
            break
    }

    // Create new copy tasks, for release builds
    if (variant.buildType.name == 'release') {
        variant.outputs.each { output ->
            def apkName = "${globalProjectName}-${android.defaultConfig.versionCode}-${variant.flavorName}-signed.apk"
            // Copy the apk to the 'etc' folder
            def copyApkTask = tasks.create("copy${variant.name.capitalize()}ApkToEtc", Copy)
            copyApkTask.from(output.outputFile)
            copyApkTask.into('../etc/apk')
            copyApkTask.rename output.outputFile.name, apkName
            copyApkTask.dependsOn variant.assemble

            releaseTask.dependsOn copyApkTask

            // Copy the apk to the deploy folder
            copyApkTask = tasks.create("copy${variant.name.capitalize()}ApkToDeploy", Copy)
            copyApkTask.from(output.outputFile)
            copyApkTask.into(buildProperties['deploy-folder'])
            copyApkTask.rename output.outputFile.name, apkName
            copyApkTask.dependsOn variant.assemble

            releaseTask.dependsOn copyApkTask
        }

        // Commented for now since we don't obfuscate (so we don't have a mapping.txt file)
//        // Copy the proguard mapping to the 'etc' folder
//        def copyMappingTask = tasks.create("copy${variant.name.capitalize()}ProguardMappingToEtc", Copy)
//        copyMappingTask.from(variant.mappingFile)
//        copyMappingTask.into('../etc/proguard')
//        copyMappingTask.rename variant.mappingFile.name, "mapping-${android.defaultConfig.versionCode}-${variant.flavorName}.txt"
//        copyMappingTask.dependsOn variant.assemble
//
//        releaseTask.dependsOn copyMappingTask
    }
}

configurations {
    blurredEpisode7Compile
    clearEpisode7Compile
    blurredRogueoneCompile
    clearRogueoneCompile
    blurredEpisode8Compile
    clearEpisode8Compile

    blurredEpisode7WearApp
    clearEpisode7WearApp
    blurredRogueoneWearApp
    clearRogueoneWearApp
    blurredEpisode8WearApp
    clearEpisode8WearApp
}

dependencies {
    blurredEpisode7Compile project(path: ':common', configuration: 'blurredEpisode7Release')
    blurredRogueoneCompile project(path: ':common', configuration: 'blurredRogueoneRelease')
    blurredEpisode8Compile project(path: ':common', configuration: 'blurredEpisode8Release')

    clearEpisode7Compile project(path: ':common', configuration: 'clearEpisode7Release')
    clearRogueoneCompile project(path: ':common', configuration: 'clearRogueoneRelease')
    clearEpisode8Compile project(path: ':common', configuration: 'clearEpisode8Release')

    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:preference-v7:23.1.1'
    compile 'com.android.support:preference-v14:23.1.1'
    compile 'org.jraf:jraf-android-util:1.0.0'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') { transitive = true; }

    // Package the wear apk inside this one
    blurredEpisode7WearApp project(path: ':wearable', configuration: 'blurredEpisode7Release')
    blurredRogueoneWearApp project(path: ':wearable', configuration: 'blurredRogueoneRelease')
    blurredEpisode8WearApp project(path: ':wearable', configuration: 'blurredEpisode8Release')
    clearEpisode7WearApp project(path: ':wearable', configuration: 'clearEpisode7Release')
    clearRogueoneWearApp project(path: ':wearable', configuration: 'clearRogueoneRelease')
    clearEpisode8WearApp project(path: ':wearable', configuration: 'clearEpisode8Release')
}